@page "/produto/edit/{ProdutoId:int}"
@inject IProdutoService ProdutoService
@inject NavigationManager Navigation

<h3>@(ProdutoId == 0 ? "Criar Produto" : "Editar Produto")</h3>

<EditForm Model="@produto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nome">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="produto.Nome" />
    </div>

    <div class="form-group">
        <label for="descricao">Descrição</label>
        <InputText id="descricao" class="form-control" @bind-Value="produto.Descricao" />
    </div>

    <div class="form-group">
        <label for="preco">Preço</label>
        <InputNumber id="preco" class="form-control" @bind-Value="produto.Preco" />
    </div>

    <div class="form-group">
        <label for="quantidade">Quantidade</label>
        <InputNumber id="quantidade" class="form-control" @bind-Value="produto.Quantidade" />
    </div>

    <div class="form-group">
        <label for="categoria">Categoria</label>
        <select id="categoria" class="form-control" @bind="produto.CategoriaId">
            <option value="">Selecione uma categoria</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.Id">@categoria.Nome</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="imagem">Imagem</label>
        <InputFile id="imagem" class="form-control" OnChange="HandleImageUpload" />
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Salvar</button>
</EditForm>

@code {
    [Parameter]
    public int ProdutoId { get; set; }

    private ProdutoDto produto = new ProdutoDto();
    private IEnumerable<CategoriaDto> categorias = new List<CategoriaDto>();
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        categorias = await ProdutoService.GetCategorias();
        if (ProdutoId != 0)
        {
            produto = await ProdutoService.GetItem(ProdutoId) ?? new ProdutoDto();
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        if (uploadedFile != null)
        {
            // Implementar a lógica para fazer o upload da imagem.
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (uploadedFile != null)
            {
                // Supondo que você tenha um método para fazer o upload da imagem no servidor
                var categoria = categorias.FirstOrDefault(c => c.Id == produto.CategoriaId)?.Nome;
                var imagePath = await UploadImageAsync(uploadedFile, categoria);
                produto.ImagemUrl = imagePath;
            }

            if (ProdutoId == 0)
            {
                await ProdutoService.AddProduto(produto);
            }
            else
            {
                await ProdutoService.UpdateProduto(produto);
            }

            Navigation.NavigateTo("/produtos");
        }
        catch (Exception ex)
        {
            // Exibir uma mensagem de erro para o usuário ou logar o erro
            Console.WriteLine($"Erro ao salvar produto: {ex.Message}");
            // Você pode adicionar uma mensagem de erro no UI se desejar
        }
    }

    private async Task<string> UploadImageAsync(IBrowserFile file, string categoria)
    {
        // Verifica se o diretório para salvar a imagem existe
        var folderPath = Path.Combine("wwwroot", "imagens", categoria);
        Directory.CreateDirectory(folderPath);

        var fileName = file.Name;
        var filePath = Path.Combine(folderPath, fileName);
        
        // Salva a imagem no servidor
        using (var stream = file.OpenReadStream())
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }

        // Retorna o caminho relativo para a imagem
        return $"/imagens/{categoria}/{fileName}";
    }
}
