@page "/crud"
@inject IProdutoService ProdutoService
@inject NavigationManager Navigation

<h3>Produtos</h3>

<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Descrição</th>
            <th>Preço</th>
            <th>Quantidade</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var produto in produtos)
        {
            <tr>
                <td>@produto.Nome</td>
                <td>@produto.Descricao</td>
                <td>@produto.Preco</td>
                <td>@produto.Quantidade</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => NavegarParaEditarProduto(produto.Id)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => ExcluirProduto(produto.Id)">Excluir</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<ProdutoDto> produtos = new List<ProdutoDto>();

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos();
    }

    private async Task CarregarProdutos()
    {
        try
        {
            produtos = await ProdutoService.GetItens();
        }
        catch (Exception ex)
        {
            // Lidar com o erro adequadamente (exibir mensagem, log, etc.)
            Console.WriteLine($"Erro ao carregar produtos: {ex.Message}");
        }
    }

    private void NavegarParaEditarProduto(int produtoId)
    {
        Navigation.NavigateTo($"/produto/edit/{produtoId}");
    }

    private async Task ExcluirProduto(int produtoId)
    {
        try
        {
            await ProdutoService.DeleteProduto(produtoId);
            await CarregarProdutos(); // Atualiza a lista após a exclusão
        }
        catch (Exception ex)
        {
            // Lidar com o erro adequadamente (exibir mensagem, log, etc.)
            Console.WriteLine($"Erro ao excluir produto: {ex.Message}");
        }
    }
}
