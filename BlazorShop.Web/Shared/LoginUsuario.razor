@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuthStateProvider

@if (usuario != null)
{
     <AuthorizeView>
            <Authorized>
            <div class="dropdown">
                <button class="btn custom-button dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="oi oi-person"></i>Olá, @usuario?.FirstOrDefault()?.Value
                </button>
                <ul class="dropdown-menu">
                    <li style="cursor: pointer"><a @onclick="Logout">sair</a> </li>
                </ul>
            </div>
            </Authorized>
            <NotAuthorized>
                <!-- Se não estiver autenticado, não exibir nada aqui -->
            </NotAuthorized>
        </AuthorizeView>

        <AuthorizeView>
                <Authorized>
                </Authorized>
                <NotAuthorized>
            <a href="Login" class="btn custom-button">
                        <i class="oi oi-person"></i>&nbsp;Faça o login
                        <span class="badge bg-dark"></span>
                    </a>
                </NotAuthorized>
            </AuthorizeView>
}
else
{

    
    
}

@code {
    private IEnumerable<Claim>? usuario;
    private string? userName;


    protected override async Task OnInitializedAsync()
    {
        // Inicializa o userName com o estado de autenticação atual
        await UpdateUserName();
    }

    private async Task UpdateUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        usuario = user.Claims;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            
            userName = user.FindFirst(ClaimTypes.Name)?.Value
                       ?? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                       ?? user.Identity?.Name;
        }
        else
        {
            userName = null;
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserName();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await CustomAuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login");
    }
}

<style>
    .custom-button {
        background-color: #6f42c1; /* Cor de fundo personalizada */
        color: #fff; /* Cor do texto */
        border: none; /* Remove a borda padrão */
    }

        .custom-button:hover {
            background-color: #31027f; /* Cor de fundo ao passar o mouse */
            color: #fff; /* Cor do texto */
        }
</style>